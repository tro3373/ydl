name: release
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Actions Cache
        uses: actions/cache@v3
        id: node_modules_cache_id
        env:
          cache-name: cache-node-modules
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
      - name: Echo cache outputs
        run: echo '${{ toJSON(steps.node_modules_cache_id.outputs) }}'
        working-directory: client/back
      - name: Install NPM Packages
        if: ${{ steps.node_modules_cache_id.outputs.cache-hit != 'true' }}
        run: npm install
        working-directory: client/back
      - name: Build Client
        # run: npm run build-prd
        run: make build STAGE=prd
        working-directory: client/back
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21.1
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
          workdir: server/ydl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Untar release
        run: tar xvfpz dist/*linux*tar.gz
        working-directory: server/ydl
      - name: Build Image
        run: make build-image-prd
        env:
          OWNER: ${{ github.repository_owner }}
      - name: Docker Login
        run: echo $DOCKER_HUB_TOKEN | docker login -u ${OWNER} --password-stdin
        env:
          OWNER: ${{ github.repository_owner }}
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Docker Push
        run: make push-image
        env:
          OWNER: ${{ github.repository_owner }}
